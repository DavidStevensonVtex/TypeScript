// Listing 14.14 Adding type parameters in the methodDecorator.ts file in the src folder

interface HasGetPrice {
    getPrice(): number;
}

export function time<This extends HasGetPrice, Args extends any[], Result>(
    method: (This, Args) => Result,
    ctx: ClassMethodDecoratorContext<This, (This, Args) => Result>) {
    const methodName = String(ctx.name);
    return function (this: This, ...args: Args): Result {
        const start = performance.now();
        console.log(`${methodName} started`);
        const result = method.call(this, ...args);
        const duration = (performance.now() - start).toFixed(2);
        console.log(`${methodName} ended ${duration} ms`);
        return result;
    }
}

// Output
// src/city.ts(8,6): error TS1241: Unable to resolve signature of method decorator when called as an expression.
//   Argument of type 'ClassMethodDecoratorContext<City, () => string> & { name: "getSummary"; private: false; static: false; }' is not assignable to parameter of type 'ClassMethodDecoratorContext<HasGetPrice, (This: any, Args: any) => string>'.
//     The types of 'access.has' are incompatible between these types.
//       Type '(object: City) => boolean' is not assignable to type '(object: HasGetPrice) => boolean'.
//         Types of parameters 'object' and 'object' are incompatible.
//           Type 'HasGetPrice' is missing the following properties from type 'City': name, population, getSummary