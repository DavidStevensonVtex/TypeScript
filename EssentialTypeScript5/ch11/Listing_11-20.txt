// Listing 11.20 Defining an abstract class in the index.ts file in the src folder

abstract class Person {
    constructor(public id: string, public name: string, public city: string) { }

    getDetails(): string {
        return `${this.name}, ${this.getSpecificDetails()}`;
    }

    abstract getSpecificDetails(): string;
}

class Employee extends Person {
    // private city: string;

    constructor(public id: string, public name: string,
        private dept: string, public city: string) {
        super(id, name, city);
        this.city = city;
    }
    writeDept() {
        console.log(`${this.name} works in ${this.dept}`);
    }

    getSpecificDetails(): string {
        return `works in ${this.dept}`;
    }
}

class Customer extends Person {
    constructor(public readonly id: string, public name: string,
        public city: string, public creditLimit: number) {
        super(id, name, city);
    }

    getSpecificDetails(): string {
        return `has ${this.creditLimit} limit`;
    }
}

class Supplier extends Person {
    constructor(public readonly id: string, public name: string,
        public city: string, public companyName: string) {
        super(id, name, city);
    }

    getSpecificDetails() {
        return `works for ${this.companyName}`;
    }
}

let data: Person[] = [
    new Employee("fvega", "Fidel Vega", "Sales", "Paris"),
    new Customer("ajones", "Alice Jones", "London", 500)
];

data.push(new Supplier("dpeters", "Dora Peters", "New York", "Acme"));

data.forEach(item => console.log(item.getDetails()));

// Output:
// Fidel Vega, works in Sales
// Alice Jones, has 500 limit
// Dora Peters, works for Acme
